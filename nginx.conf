worker_processes 4;
daemon off;
error_log stderr notice;

events {
  worker_connections 1024;
}

http {
  include mime.types;

  lua_code_cache on;
  client_body_temp_path tmp/client_body;
  fastcgi_temp_path tmp/fastcgi;
  proxy_temp_path tmp/proxy;
  scgi_temp_path tmp/scgi;
  uwsgi_temp_path tmp/uwsgi;

  limit_req_zone $binary_remote_addr zone=heavy:1m rate=2r/s;

  lua_shared_dict challenges 1m;
  lua_shared_dict sessions 1m;

  server {
    listen %PORT%;
    root static;
    autoindex on;

    location /challenge.png {
      limit_req zone=heavy nodelay;
      default_type image/png;
      expires 0;
      add_header Pragma no-cache;
      add_header Cache-Control 'no-cache, no-store, must-revalidate';
      content_by_lua '
        local pool = require "pool"
        local image = require "image"
        local hmac = require "crypto".hmac
        local challenge = pool:fetch()
        if challenge then
          local time = os.time()
          local hash = hmac.digest("sha1", challenge, time)
          -- Create session
          ngx.shared.sessions:set(hash, time, 180)
          ngx.header["Set-Cookie"] = ("recattle=%s"):format(hash)
          local args = ngx.req.get_uri_args(3)
          -- Generate image
          ngx.print(image.create(challenge, "png", args.background, args.foreground))
        else
          ngx.print(image.create("NO UPSTREAM!11", "png", "white", "red"))
        end
      ';
    }

    location /validate {
      default_type text/plain;
      lua_need_request_body on;
      content_by_lua '
        local hmac = require "crypto".hmac
        local utf8 = require "utf8"
        local sessions = ngx.shared.sessions
        function invalid()
          ngx.print("invalid")
          ngx.exit(ngx.HTTP_OK)
        end
        ngx.log(ngx.NOTICE, ngx.req.get_uri_args(2).response or ngx.req.get_post_args(2).response)
        local response = ngx.req.get_uri_args(2).response or ngx.req.get_post_args(2).response or invalid()
        local hash = ngx.var.cookie_recattle or args.challenge or invalid()
        local time = sessions:get(hash) or invalid()
        if hmac.digest("sha1", utf8.upper(response), time) ~= hash then
          invalid()
        end
        ngx.print("valid")
        sessions:delete(hash)
      ';
    }


    location /data.xml {
      internal;
      proxy_set_header User-Agent recattle;
      proxy_set_header Referer '';
      proxy_pass http://export.yandex.ru/last/last20x.xml;
    }
  }
}
